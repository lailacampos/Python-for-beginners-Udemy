# Generator comprehensions
# About list comprehensions: https://realpython.com/list-comprehension-python/#using-list-comprehensions

# A list comprehension syntax:
# list = [expression for item in iterable]

# a generator comprehension is the same as a list's but it uses round brackets instead or square ones
# A generator comprehension syntax:
# generator = (expression for item in iterable)

# expression -> is the member itself, a call to a method, or any other valid expression that returns a value.
# item -> is the object or value in the list or iterable. In the example above, the member value is i.
# iterable -> is a list, set, sequence, generator, or any other object that can return its elements one at a time.

import sys

# A list comprehension example:
lst = [num**2 for num in range(1000)]  # result -> [0, 1, 4, 9, 16]

# A generator comprehension example:
generator = (num**2 for num in range(1000))  # result -> generator object <genexpr> at memory_location

print(lst)
print(sys.getsizeof(lst))
print(generator)
print(sys.getsizeof(generator))

# A generator is smaller than a list generated by a list comprehension
# However, if the list is smaller than the running machine’s available memory, then list comprehensions can be
# faster to evaluate than the equivalent generator expression
# Therefore, if speed is an issue and memory isn’t, then a list comprehension is likely a better tool for the job.
